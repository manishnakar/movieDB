{"version":3,"sources":["components/header/Header.js","components/navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Header","onClick","window","scroll","className","style","fontWeight","color","useStyles","makeStyles","root","width","position","bottom","backgroundColor","zIndex","boxShadow","SimpleBottomNavigation","classes","React","useState","value","setValue","navigate","useNavigate","useEffect","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","Trending","lazy","Search","Movies","Series","App","fallback","Container","path","element","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6PAYeA,MARf,WACI,OACI,sBAAKC,QAAS,kBAAKC,OAAOC,OAAO,EAAE,IAAIC,UAAU,SAAjD,UACI,oCADJ,QACqB,uBAAMC,MAAO,CAACC,WAAW,IAAzB,gBAAiC,sBAAMD,MAAO,CAACE,MAAM,UAApB,eAAjC,Y,qHCGvBC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,SAAU,QACVC,OAAQ,EACRC,gBAAiB,UACjBC,OAAQ,IACRC,UAAW,yBAIA,SAASC,IACtB,IAAMC,EAAUV,IAChB,EAA0BW,IAAMC,SAAS,GAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,cAejB,OAbAC,qBAAU,WACM,IAAVJ,EACFE,EAAS,KACU,IAAVF,EACTE,EAAS,WACU,IAAVF,EACTE,EAAS,WACU,IAAVF,GACTE,EAAS,aAGV,CAACF,EAAOE,IAGT,eAACG,EAAA,EAAD,CACEL,MAAOA,EACPM,SAAU,SAACC,EAAOC,GAChBP,EAASO,IAEXC,YAAU,EACV1B,UAAWc,EAAQR,KANrB,UAQE,cAACqB,EAAA,EAAD,CACE1B,MAAO,CAAEE,MAAO,SAChByB,MAAM,WACNC,KAAM,cAAC,IAAD,MAER,cAACF,EAAA,EAAD,CACE1B,MAAO,CAAEE,MAAO,SAChByB,MAAM,SACNC,KAAM,cAAC,IAAD,MAER,cAACF,EAAA,EAAD,CACE1B,MAAO,CAAEE,MAAO,SAChByB,MAAM,YACNC,KAAM,cAAC,IAAD,MAER,cAACF,EAAA,EAAD,CACE1B,MAAO,CAAEE,MAAO,SAChByB,MAAM,SACNC,KAAM,cAAC,IAAD,S,kBC1DRC,EAAWC,gBAAK,kBAAM,uDACtBC,EAASD,gBAAK,kBAAM,8DACpBE,EAASF,gBAAK,kBAAM,uDACpBG,EAASH,gBAAK,kBAAM,uDAwBXI,MArBf,WACE,OACE,cAAC,IAAD,UACC,eAAC,WAAD,CAAUC,SAAU,6CAApB,UACG,cAAC,EAAD,IACJ,sBAAKpC,UAAU,MAAf,UACE,cAACqC,EAAA,EAAD,UACE,eAAC,IAAD,WACG,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAACT,EAAD,IAAcU,OAAK,IAC3C,cAAC,IAAD,CAAOF,KAAK,UAAUC,QAAS,cAACN,EAAD,MAC/B,cAAC,IAAD,CAAOK,KAAK,UAAUC,QAAS,cAACL,EAAD,MAC/B,cAAC,IAAD,CAAOI,KAAK,UAAUC,QAAS,cAAC,EAAD,WAGrC,cAAC1B,EAAD,aC5BA4B,EAAcC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC9EjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDAnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB1E,OAAO6C,SAAS8B,MACpDC,SAAW5E,OAAO6C,SAAS+B,OAIvC,OAGF5E,OAAO6E,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,GAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BtD,OAAO6C,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCxB/BE,K","file":"static/js/main.622b02a9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './header.css'\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div onClick={()=> window.scroll(0,0)} className=\"header\">\r\n            <b>Jio</b> &nbsp;<span style={{fontWeight:50}}>Mov<span style={{color:\"yellow\"}}>i</span>es</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport TvIcon from \"@material-ui/icons/Tv\";\r\nimport MovieIcon from \"@material-ui/icons/Movie\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    position: \"fixed\",\r\n    bottom: 0,    \r\n    backgroundColor: \"#2d313a\",\r\n    zIndex: 100,\r\n    boxShadow: \"0px 1px 5px #CECECE\",\r\n  },\r\n});\r\n\r\nexport default function SimpleBottomNavigation() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);  \r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (value === 0) {\r\n      navigate(\"/\");\r\n    } else if (value === 1) {\r\n      navigate(\"/movies\");\r\n    } else if (value === 2) {\r\n      navigate(\"/series\");\r\n    } else if (value === 3) {\r\n      navigate(\"/search\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [value, navigate]);\r\n\r\n  return (\r\n    <BottomNavigation\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        setValue(newValue);\r\n      }}\r\n      showLabels\r\n      className={classes.root}\r\n    >\r\n      <BottomNavigationAction\r\n        style={{ color: \"white\" }}\r\n        label=\"Trending\"\r\n        icon={<WhatshotIcon />}\r\n      />\r\n      <BottomNavigationAction\r\n        style={{ color: \"white\" }}\r\n        label=\"Movies\"\r\n        icon={<MovieIcon />}\r\n      />\r\n      <BottomNavigationAction\r\n        style={{ color: \"white\" }}\r\n        label=\"TV Series\"\r\n        icon={<TvIcon />}\r\n      />\r\n      <BottomNavigationAction\r\n        style={{ color: \"white\" }}\r\n        label=\"Search\"\r\n        icon={<SearchIcon />}\r\n      />\r\n    </BottomNavigation>\r\n  );\r\n}","import React, {Suspense, lazy} from 'react';\nimport Header from './components/header/Header'\nimport {Container} from '@material-ui/core'\nimport SimpleBottomNavigation from './components/navigation/Navigation'\nimport './App.css';\nimport { BrowserRouter,  Routes ,Route } from 'react-router-dom';\n\n//Lazy loading of react components\nconst Trending = lazy(() => import('./pages/trending'));\nconst Search = lazy(() => import('./pages/search'));\nconst Movies = lazy(() => import('./pages/movies'));\nconst Series = lazy(() => import('./pages/series'));\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n     <Suspense fallback={<div>Loading...</div>}>\n        <Header></Header>\n    <div className=\"App\">\n      <Container>\n        <Routes>          \n           <Route path=\"/\" element={<Trending />} exact />            \n            <Route path=\"/movies\" element={<Movies />} />\n            <Route path=\"/series\" element={<Series />} />\n            <Route path=\"/search\" element={<Search />} />\n        </Routes>\n      </Container>      \n      <SimpleBottomNavigation></SimpleBottomNavigation>\n    </div>\n    </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.register();\n"],"sourceRoot":""}